var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = QuantumUtilities","category":"page"},{"location":"#QuantumUtilities","page":"Home","title":"QuantumUtilities","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for QuantumUtilities.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [QuantumUtilities]","category":"page"},{"location":"#QuantumUtilities.SpinHalf","page":"Home","title":"QuantumUtilities.SpinHalf","text":"SpinHalf\nSpinOne\nSpinTwo\n\nConvenient named spin lengths of the respective cases.\n\n\n\n\n\n","category":"constant"},{"location":"#QuantumUtilities.SpinHalfInteger","page":"Home","title":"QuantumUtilities.SpinHalfInteger","text":"struct SpinHalfInteger{N}\n\nA type representing a half-integer spin length N/2.\n\n\n\n\n\n","category":"type"},{"location":"#QuantumUtilities.SpinInteger","page":"Home","title":"QuantumUtilities.SpinInteger","text":"struct SpinInteger{N}\n\nA type representing an integer spin length N.\n\n\n\n\n\n","category":"type"},{"location":"#QuantumUtilities.SpinLength","page":"Home","title":"QuantumUtilities.SpinLength","text":"struct SpinLength{N,D}\n\nA type representing a spin length N/D.\n\nNote that N and D must be such that the ratio N/D is either an integer or a half-integer.\n\n\n\n\n\n","category":"type"},{"location":"#QuantumUtilities.SpinLength-Tuple{Any, Any}","page":"Home","title":"QuantumUtilities.SpinLength","text":"SpinLength(N, D)\nSpinLength(S0::Int)\nSpinLength(S0::Rational)\nSpinLength(S0)\nSpinInteger(S0)\nSpinHalfInteger(S0)\n\nConvenient constructors for spin length types.\n\n\n\n\n\n","category":"method"},{"location":"#QuantumUtilities.add-Union{Tuple{P}, Tuple{M}, Tuple{D}, Tuple{N}, Tuple{SpinLength{N, D}, SpinLength{M, P}}} where {N, D, M, P}","page":"Home","title":"QuantumUtilities.add","text":"add(S1::SpinLength, S2::SpinLength)\n\nReturn a tuple of the different possible total angular momentum values resulting from the addition of two angular momenta S1 and S2.\n\nArguments\n\nS1::SpinLength: The first angular momentum.\nS2::SpinLength: The second angular momentum.\n\nReturns\n\nA tuple containing all possible values of total angular momentum.\n\n\n\n\n\n","category":"method"},{"location":"#QuantumUtilities.annihilation_operator","page":"Home","title":"QuantumUtilities.annihilation_operator","text":"annihilation_operator(ncutoff::Int, noffset::Int=0)\n\nCreate the annihilation (lowering) operator matrix in the Fock basis for a quantum harmonic oscillator.\n\nArguments\n\nncutoff::Int: The cutoff value for the number of excitations to be included.\nnoffset::Int=0: The offset for the number of excitations, defaults to 0.\n\nReturns\n\nThe matrix representation of the annihilation operator.\n\n\n\n\n\n","category":"function"},{"location":"#QuantumUtilities.anticommutator_superop-Tuple{Any}","page":"Home","title":"QuantumUtilities.anticommutator_superop","text":"anticommutator_superop(A)\n\nComputes the Liouville space superoperator representation of the anti-commutator with a matrix A.\n\nArguments\n\nA: The input matrix.\n\nReturns\n\nThe anti-commutator superoperator matrix obtained by adding the right superoperator of A to the left superoperator of A. ```\n\n\n\n\n\n","category":"method"},{"location":"#QuantumUtilities.cauchy_quadgk-Tuple{Any, Any, Any}","page":"Home","title":"QuantumUtilities.cauchy_quadgk","text":"cauchy_quadgk(g, a, b; kws...)\n\nComputes the Cauchy principal value of the integral of a function g over the interval [a, b] using the quadgk quadrature method.\n\nArguments\n\ng: The function to integrate.\na: The lower bound of the interval.\nb: The upper bound of the interval.\nkws...: Additional keyword arguments accepted by quadgk.\n\nReturns\n\nA tuple (I, E) containing the approximated integral I and an estimated upper bound on the absolute error E.\n\nThrows\n\nArgumentError: If the interval [a, b] does not include zero.\n\nExamples\n\njulia> g(x) = 1 / (x + 1)\n\njulia> cauchy_quadgk(g, -1/2, 1/2)\n(-1.09861228866811, 1.9939216944209193e-11)\n\n\n\n\n\n","category":"method"},{"location":"#QuantumUtilities.coherent_state","page":"Home","title":"QuantumUtilities.coherent_state","text":"coherent_state(α, ncutoff::Int, noffset::Int=0)\n\nCreate a coherent state α in the Fock basis of a quantum harmonic oscillator.\n\nThe state is created by applying the displacement operator to the vacuum state:\n\nleftalpharightrangle = D(alpha)left0rightrangle\n\nArguments\n\nα: The complex amplitude of the coherent state.\nncutoff::Int: The cutoff value for the number of excitations to be included.\nnoffset::Int=0: The offset for the number of excitations, defaults to 0.\n\nReturns\n\nThe coherent state.\n\n\n\n\n\n","category":"function"},{"location":"#QuantumUtilities.coherent_state_analytic","page":"Home","title":"QuantumUtilities.coherent_state_analytic","text":"coherent_state_analytic(α, ncutoff::Int, noffset::Int=0)\n\nCreate a coherent state α in the Fock basis of a quantum harmonic oscillator.\n\nThe state is created by using the analytical expression for the state coefficients:\n\nleftalpharightrangle = sum_n=mathrmnoffset^mathrmncutoff e^-fracalpha^22fracalpha^nsqrtnleftnrightrangle\n\nDue to the truncation of the series, the state is not guaranteed to be normalized.\n\nArguments\n\nα: The complex amplitude of the coherent state.\nncutoff::Int: The cutoff value for the number of excitations to be included.\nnoffset::Int=0: The offset for the number of excitations, defaults to 0.\n\nReturns\n\nThe coherent state.\n\n\n\n\n\n","category":"function"},{"location":"#QuantumUtilities.coherent_state_coefficient-Tuple{Any, Int64}","page":"Home","title":"QuantumUtilities.coherent_state_coefficient","text":"coherent_state_coefficient(α, n::Int)\n\nCoefficient in the Fock basis for the coherent state α of a quantum harmonic oscillator:\n\nleftlangle nmiddlealpharightrangle = e^-fracalpha^22fracalpha^nsqrtn\n\nArguments\n\nα: The complex amplitude of the coherent state.\nn::Int: The Fock basis occupation number of the coefficient.\n\nReturns\n\nThe coherent state coefficient in the Fock basis.\n\n\n\n\n\n","category":"method"},{"location":"#QuantumUtilities.commutator_superop-Tuple{Any}","page":"Home","title":"QuantumUtilities.commutator_superop","text":"commutator_superop(A)\n\nComputes the Liouville space superoperator representation of the commutator with a matrix A.\n\nArguments\n\nA: The input matrix.\n\nReturns\n\nThe commutator superoperator matrix obtained by subtracting the right superoperator of A from the left superoperator of A. ```\n\n\n\n\n\n","category":"method"},{"location":"#QuantumUtilities.creation_operator","page":"Home","title":"QuantumUtilities.creation_operator","text":"creation_operator(ncutoff::Int, noffset::Int=0)\n\nCreate the creation (raising) operator matrix in the Focks basis for a quantum harmonic oscillator.\n\nArguments\n\nncutoff::Int: The cutoff value for the number of excitations to be included.\nnoffset::Int=0: The offset for the number of excitations, defaults to 0.\n\nReturns\n\nThe matrix representation of the creation operator.\n\n\n\n\n\n","category":"function"},{"location":"#QuantumUtilities.displacement_operator","page":"Home","title":"QuantumUtilities.displacement_operator","text":"displacement_operator(α, ncutoff::Int, noffset::Int=0)\n\nCreate the displacement operator for a quantum harmonic oscillator.\n\nThe operator is constructed using the definition as unitary operator based on the creation and annihilation operators:\n\nD(alpha) = e^alpha a^dagger - alpha^* a\n\nArguments\n\nα: The complex displacement parameter.\nncutoff::Int: The cutoff value for the number of excitations to be included.\nnoffset::Int=0: The offset for the number of excitations, defaults to 0.\n\nReturns\n\nThe matrix representation of the displacement operator.\n\n\n\n\n\n","category":"function"},{"location":"#QuantumUtilities.displacement_operator_analytic","page":"Home","title":"QuantumUtilities.displacement_operator_analytic","text":"displacement_operator_analytic(α, ncutoff::Int, noffset::Int=0)\n\nCreate the displacement operator for a quantum harmonic oscillator.\n\nThe operator is constructed using the analytic expressions of its matrix elements in the Fock basis:\n\nleftlangle m middle D(alpha) middle n rightrangle = \ne^-fracalpha^22 sqrtfracnm alpha^m-n L_n^(m-n)(alpha^2)\n\nwhere L_n^(m-n) are the generalised Laguerre polynomial.\n\nDue to the truncation of the matrix elements, the operator is not guaranteed to be unitary.\n\nArguments\n\nα: The complex displacement parameter.\nncutoff::Int: The cutoff value for the number of excitations to be included.\nnoffset::Int=0: The offset for the number of excitations, defaults to 0.\n\nReturns\n\nThe matrix representation of the displacement operator.\n\n\n\n\n\n","category":"function"},{"location":"#QuantumUtilities.displacement_operator_coefficient-Tuple{Any, Int64, Int64}","page":"Home","title":"QuantumUtilities.displacement_operator_coefficient","text":"displacement_operator_coefficient(α, m::Int, n::Int)\n\nReturn the displacement operator matrix elements in the Fock basis for a quantum harmonic oscillator:\n\nleftlangle m middle D(alpha) middle n rightrangle = \ne^-fracalpha^22 sqrtfracnm alpha^m-n L_n^(m-n)(alpha^2)\n\nwhere math L_n^{(m-n)} are the generalised Laguerre polynomial.\n\nArguments\n\nα: The complex displacement parameter.\nm::Int: The occupation number of the row.\nn::Int: The occupation number of the column.\n\nReturns\n\nThe matrix elements of the displacement operator in the Fock basis.\n\n\n\n\n\n","category":"method"},{"location":"#QuantumUtilities.hamiltonian_evolution_superop-Tuple{Any, Any}","page":"Home","title":"QuantumUtilities.hamiltonian_evolution_superop","text":"hamiltonian_evolution_superop(H, dt)\n\nComputes the superoperator corresponding to the Hamiltonian evolution of a system governed by the Hamiltonian matrix H over a time step dt.\n\nArguments\n\nH: The Hamiltonian matrix representing the dynamics of the system.\ndt: The time step for the evolution.\n\nReturns\n\nThe superoperator matrix representing the Hamiltonian evolution over the specified time step. ```\n\n\n\n\n\n","category":"method"},{"location":"#QuantumUtilities.left_right_superop-Tuple{Any, Any}","page":"Home","title":"QuantumUtilities.left_right_superop","text":"left_right_superop(A, B)\n\nComputes the Liouville space superoperator representation of the operation A ⋅ B.\n\nArguments\n\nA: The left matrix.\nB: The right matrix.\n\nReturns\n\nThe superoperator obtained by performing a Kronecker product between the transpose of A and B. ```\n\n\n\n\n\n","category":"method"},{"location":"#QuantumUtilities.left_superop-Tuple{Any}","page":"Home","title":"QuantumUtilities.left_superop","text":"left_superop(A)\nleft_superop(A, d::Int)\n\nComputes the Liouville space left superoperator representation of a matrix A.\n\nArguments\n\nA: The input matrix.\nd: (Optional) The size of the identity matrix. If not provided, it is set to the number of columns in A.\n\nReturns\n\nThe left superoperator matrix obtained by performing a Kronecker product between the identity matrix and A.\n\nExamples\n\njulia> A = [1 2; 3 4]\n2×2 Matrix{Int64}:\n 1  2\n 3  4\n\njulia> left_superop(A)\n4×4 Matrix{Int64}:\n 1  2  0  0\n 3  4  0  0\n 0  0  1  2\n 0  0  3  4\n\n\n\n\n\n","category":"method"},{"location":"#QuantumUtilities.momentum_operator","page":"Home","title":"QuantumUtilities.momentum_operator","text":"momentum_operator(ncutoff::Int, noffset::Int=0)\n\nCreate the momentum operator matrix in the Fock basis for a quantum harmonic oscillator.\n\nArguments\n\nncutoff::Int: The cutoff value for the number of excitations to be included.\nnoffset::Int=0: The offset for the number of excitations, defaults to 0.\n\nReturns\n\nThe matrix representation of the momentum operator.\n\n\n\n\n\n","category":"function"},{"location":"#QuantumUtilities.number_operator","page":"Home","title":"QuantumUtilities.number_operator","text":"number_operator(ncutoff::Int, noffset::Int=0)\n\nCreate the number operator matrix in the Fock basis for a quantum harmonic oscillator.\n\nArguments\n\nncutoff::Int: The cutoff value for the number of excitations to be included.\nnoffset::Int=0: The offset for the number of excitations, defaults to 0.\n\nReturns\n\nThe matrix representation of the number operator.\n\n\n\n\n\n","category":"function"},{"location":"#QuantumUtilities.operator_to_vector-Tuple{Any}","page":"Home","title":"QuantumUtilities.operator_to_vector","text":"operator_to_vector(A)\n\nConverts a matrix or array-like object A into a one-dimensional vector.\n\nArguments\n\nA: The input matrix or array-like object.\n\nReturns\n\nA one-dimensional vector representing the elements of A.\n\nExamples\n\njulia> A = [1 2; 3 4]\n2×2 Matrix{Int64}:\n 1  2\n 3  4\n\njulia> operator_to_vector(A)\n4-element Vector{Int64}:\n 1\n 3\n 2\n 4\n\n\n\n\n\n","category":"method"},{"location":"#QuantumUtilities.partial_trace-Union{Tuple{N}, Tuple{M}, Tuple{AbstractMatrix, Tuple{Vararg{Int64, M}}, Tuple{Vararg{Int64, N}}}} where {M, N}","page":"Home","title":"QuantumUtilities.partial_trace","text":"partial_trace(ρ::AbstractMatrix, trace_indices::Union{Int,Tuple{Vararg{Int}}}, dims::Tuple{Vararg{Int}})\n\nComputes the partial trace of a density matrix ρ by tracing out the specified subsystems.\n\nArguments\n\nρ::AbstractMatrix: The input density matrix.\ntrace_indices::Union{Int,Tuple{Vararg{Int}}}: The indices of the subsystems to trace over (can be a single integer or a tuple of integers).\ndims:::Tuple{Vararg{Int}}: The dimensions of the subsystems.\n\nReturns\n\nThe partial trace of the input density matrix. ```\n\n\n\n\n\n","category":"method"},{"location":"#QuantumUtilities.partial_trace-Union{Tuple{N}, Tuple{M}, Tuple{AbstractVector, Tuple{Vararg{Int64, M}}, Tuple{Vararg{Int64, N}}}} where {M, N}","page":"Home","title":"QuantumUtilities.partial_trace","text":"partial_trace(v::AbstractVector, trace_indices::Union{Int,Tuple{Vararg{Int}}}, dims::Tuple{Vararg{Int}})\n\nComputes the partial trace of a pure state v.\n\nArguments\n\nv::AbstractVector: The input pure state.\ntrace_indices::Union{Int,Tuple{Vararg{Int}}}: The indices of the subsystems to trace over (can be a single integer or a tuple of integers).\ndims:Tuple{Vararg{Int}}: The dimensions of the subsystems.\n\nReturns\n\nThe partial trace of the input state. ```\n\n\n\n\n\n","category":"method"},{"location":"#QuantumUtilities.position_operator","page":"Home","title":"QuantumUtilities.position_operator","text":"position_operator(ncutoff::Int, noffset::Int=0)\n\nCreate the position operator matrix in the Fock basis for a quantum harmonic oscillator.\n\nArguments\n\nncutoff::Int: The cutoff value for the number of excitations to be included.\nnoffset::Int=0: The offset for the number of excitations, defaults to 0.\n\nReturns\n\nThe matrix representation of the position operator.\n\n\n\n\n\n","category":"function"},{"location":"#QuantumUtilities.realifclose-Tuple{Number}","page":"Home","title":"QuantumUtilities.realifclose","text":"realifclose(x::Complex{T}; tol=eps(T)) where T <: AbstractFloat\n\nReturns the real part of the complex number x if the imaginary part is close to zero within a specified tolerance, and returns x otherwise.\n\nArguments\n\nx::Complex{T}: The input complex number.\ntol::AbstractFloat: The tolerance for considering the imaginary part close to zero. Defaults to eps(T).\n\nReturns\n\nThe real part of x if the imaginary part is close to zero within the specified tolerance, otherwise x itself.\n\nExamples\n\njulia> realifclose(2 + 0im)\n2\n\njulia> realifclose(1e-21 + 1e-21im)\n1.0e-21\n\njulia> realifclose(1e-21 + 1e-21im; tol=1e-22)\n1.0e-21 + 1.0e-21im\n\n\n\n\n\n","category":"method"},{"location":"#QuantumUtilities.right_superop-Tuple{Any}","page":"Home","title":"QuantumUtilities.right_superop","text":"right_superop(A)\nright_superop(A, d::Int)\n\nComputes the Liouville space right superoperator representation of a matrix A.\n\nArguments\n\nA: The input matrix.\nd: (Optional) The size of the identity matrix. If not provided, it is set to the number of rows in A.\n\nReturns\n\nThe right superoperator matrix obtained by performing a Kronecker product between the transpose of A and the identity matrix.\n\nExamples\n\njulia> A = [1 2; 3 4]\n2×2 Matrix{Int64}:\n 1  2\n 3  4\n\njulia> right_superop(A)\n4×4 Matrix{Int64}:\n 1  0  3  0\n 0  1  0  3\n 2  0  4  0\n 0  2  0  4\n\n\n\n\n\n","category":"method"},{"location":"#QuantumUtilities.rotation_operator-Tuple{SpinLength, Any, Any, Any}","page":"Home","title":"QuantumUtilities.rotation_operator","text":"rotation_operator(S0::SpinLength, θ, φ, α)\n\nCreate the rotation operator matrix for a given spin length and rotation parameters.\n\nArguments\n\nS0::SpinLength: The spin length.\nθ: The polar angle characterising the direction of the rotation.\nφ: The azimuthal angle characterising the direction of the rotation.\nα: The rotation angle.\n\nReturns\n\nThe matrix representation of the rotation operator for spin S0.\n\n\n\n\n\n","category":"method"},{"location":"#QuantumUtilities.rotation_operator-Tuple{SpinLength, Any, Any}","page":"Home","title":"QuantumUtilities.rotation_operator","text":"rotation_operator(S0::SpinLength, n, α)\n\nCreate the rotation operator matrix for a given spin length and rotation parameters.\n\nArguments\n\nS0::SpinLength: The spin length.\nn: The axis of rotation (must be a three-component vector-like).\nα: The rotation angle.\n\nReturns\n\nThe matrix representation of the rotation operator for spin S0.\n\n\n\n\n\n","category":"method"},{"location":"#QuantumUtilities.s2_operator-Union{Tuple{SpinLength{N, D}}, Tuple{D}, Tuple{N}} where {N, D}","page":"Home","title":"QuantumUtilities.s2_operator","text":"s2_operator(S0::SpinLength)\n\nCreate the matrix representation of the squared spin operator in the standard z basis.\n\nArguments\n\nS0::SpinLength: The spin length.\n\nReturns\n\nThe matrix representation of the S^2 operator.\n\n\n\n\n\n","category":"method"},{"location":"#QuantumUtilities.scrap-Tuple{AbstractFloat}","page":"Home","title":"QuantumUtilities.scrap","text":"scrap(x::AbstractFloat; tol=eps(typeof(x)))\n\nReturns a floating-point number with a small value set to zero within a specified tolerance.\n\nArguments\n\nx::AbstractFloat: The input floating-point number.\ntol: The tolerance for considering the input value close to zero. Defaults to eps(typeof(x)).\n\nReturns\n\nA floating-point number with a small value set to zero within the specified tolerance.\n\nExamples\n\njulia> scrap(1.2e-21)\n0.0\n\njulia> scrap(1.2e-21; tol=1e-22)\n1.2e-21\n\n\n\n\n\n","category":"method"},{"location":"#QuantumUtilities.scrap-Union{Tuple{Complex{T}}, Tuple{T}} where T<:AbstractFloat","page":"Home","title":"QuantumUtilities.scrap","text":"scrap(x::Complex{T}; tol=eps(T)) where T <: AbstractFloat\n\nReturns a complex number with small real and imaginary parts set to zero within a specified tolerance.\n\nArguments\n\nx::Complex{T}: The input complex number.\ntol::AbstractFloat: The tolerance for considering the real and imaginary parts close to zero. Defaults to eps(T).\n\nReturns\n\nA complex number with small real and imaginary parts set to zero within the specified tolerance.\n\nExamples\n\njulia> scrap(1e-20 + 1e-21im)\n1.0e-20 + 1.0e-21im\n\njulia> scrap(1e-20 + 1e-25im)\n1.0e-20\n\n\n\n\n\n","category":"method"},{"location":"#QuantumUtilities.sm_operator-Union{Tuple{SpinLength{N, D}}, Tuple{D}, Tuple{N}} where {N, D}","page":"Home","title":"QuantumUtilities.sm_operator","text":"sm_operator(S0::SpinLength)\n\nCreate the matrix representation of the lowering spin ladder operator in the standard z basis.\n\nArguments\n\nS0::SpinLength: The spin length.\n\nReturns\n\nThe matrix representation of the S_- operator.\n\n\n\n\n\n","category":"method"},{"location":"#QuantumUtilities.sp_operator-Union{Tuple{SpinLength{N, D}}, Tuple{D}, Tuple{N}} where {N, D}","page":"Home","title":"QuantumUtilities.sp_operator","text":"sp_operator(S0::SpinLength)\n\nCreate the matrix representation of the raising spin ladder operator in the standard z basis.\n\nArguments\n\nS0::SpinLength: The spin length.\n\nReturns\n\nThe matrix representation of the S_+ operator.\n\n\n\n\n\n","category":"method"},{"location":"#QuantumUtilities.spin_projections-Tuple{SpinLength}","page":"Home","title":"QuantumUtilities.spin_projections","text":"spin_projections(S0::SpinLength; rev=false)\n\nReturn an iterator over the projections of a spin of length S0. By default, the iterator ranges from smallest to largest projection. The optional argument rev can be used to reverse the order (i.e. from largest to smallest).\n\nArguments\n\nS0::SpinLength: The spin length.\nrev=false: Whether to reverse the order of the projections.\n\nReturns\n\nThe iterator over the spin projections.\n\n\n\n\n\n","category":"method"},{"location":"#QuantumUtilities.sx_operator-Union{Tuple{SpinLength{N, D}}, Tuple{D}, Tuple{N}} where {N, D}","page":"Home","title":"QuantumUtilities.sx_operator","text":"sx_operator(S0::SpinLength)\n\nCreate the matrix representation of the x spin component operator in the standard z basis.\n\nArguments\n\nS0::SpinLength: The spin length.\n\nReturns\n\nThe matrix representation of the S_x operator.\n\n\n\n\n\n","category":"method"},{"location":"#QuantumUtilities.sy_operator-Union{Tuple{SpinLength{N, D}}, Tuple{D}, Tuple{N}} where {N, D}","page":"Home","title":"QuantumUtilities.sy_operator","text":"sy_operator(S0::SpinLength)\n\nCreate the matrix representation of the y spin component operator in the standard z basis.\n\nArguments\n\nS0::SpinLength: The spin length.\n\nReturns\n\nThe matrix representation of the S_y operator.\n\n\n\n\n\n","category":"method"},{"location":"#QuantumUtilities.sz_operator-Tuple{SpinLength}","page":"Home","title":"QuantumUtilities.sz_operator","text":"sz_operator(S0::SpinLength)\n\nCreate the matrix representation of the z spin component operator in the standard z basis.\n\nArguments\n\nS0::SpinLength: The spin length.\n\nReturns\n\nThe matrix representation of the S_z operator.\n\n\n\n\n\n","category":"method"},{"location":"#QuantumUtilities.tensor","page":"Home","title":"QuantumUtilities.tensor","text":"tensor(A, B...)\n\nComputes the tensor product of matrices or array-like objects A and B.\n\nArguments\n\nA: The first matrix or array-like object.\nB...: Additional matrices or array-like objects to compute their tensor product with A.\n\nReturns\n\nThe tensor product of the input matrices or array-like objects. ```\n\n\n\n\n\n","category":"function"},{"location":"#QuantumUtilities.usinc-Tuple{Any}","page":"Home","title":"QuantumUtilities.usinc","text":"usinc(x)\n\nComputes the unnormalized sinc function value for the input x, defined as sin(x)/x.\n\nArguments\n\nx: The input value.\n\nReturns\n\nThe unnormalized sinc function value of x.\n\nExamples\n\njulia> usinc(0.5)\n0.958851077208406\n\njulia> usinc(0.0)\n1.0\n\n\n\n\n\n","category":"method"},{"location":"#QuantumUtilities.vector_to_operator-Tuple{Any}","page":"Home","title":"QuantumUtilities.vector_to_operator","text":"vector_to_operator(v)\nvector_to_operator(v, d::Int)\n\nReshapes a one-dimensional vector v into a matrix of size d by d.\n\nArguments\n\nv: The input one-dimensional vector.\nd: (Optional) The desired size of the resulting matrix. If not provided, it is calculated as the rounded integer square root of the number of elements in v.\n\nReturns\n\nA matrix of size d by d representing the elements of v reshaped accordingly.\n\nExamples\n\njulia> v = [1, 3, 2, 4]\n4-element Vector{Int64}:\n 1\n 3\n 2\n 4\n\njulia> vector_to_operator(v)\n2×2 Matrix{Int64}:\n 1  2\n 3  4\n\n\n\n\n\n","category":"method"}]
}
