var documenterSearchIndex = {"docs":
[{"location":"","page":"Home","title":"Home","text":"CurrentModule = QuantumUtilities","category":"page"},{"location":"#QuantumUtilities","page":"Home","title":"QuantumUtilities","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for QuantumUtilities.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"","page":"Home","title":"Home","text":"Modules = [QuantumUtilities]","category":"page"},{"location":"#QuantumUtilities.partial_trace-Tuple{AbstractMatrix, Any, Any}","page":"Home","title":"QuantumUtilities.partial_trace","text":"partial_trace(ρ::AbstractMatrix, keep, dims)\n\nComputes the partial trace of a density matrix ρ by tracing out the specified subsystems.\n\nArguments\n\nρ::AbstractMatrix: The input density matrix.\nkeep: The indices of the subsystems to keep in the partial trace.\ndims: The dimensions of the subsystems.\n\nReturns\n\nThe partial trace of the input density matrix.\n\nExamples\n\njulia> A = [1 2 3 4; 5 6 7 8; 9 10 11 12; 13 14 15 16]\n4×4 Matrix{Int64}:\n  1   2   3   4\n  5   6   7   8\n  9  10  11  12\n 13  14  15  16\n\njulia> partial_trace(A, [2], [2, 2])\n2×2 Matrix{Int64}:\n 12  14\n 20  22\n\n\n\n\n\n","category":"method"},{"location":"#QuantumUtilities.partial_trace-Tuple{AbstractVector, Any, Any}","page":"Home","title":"QuantumUtilities.partial_trace","text":"partial_trace(v::AbstractVector, keep, dims)\n\nComputes the partial trace of a pure state v.\n\nArguments\n\nv::AbstractVector: The input pure state.\nkeep: The indices of the subsystems to keep in the partial trace.\ndims: The dimensions of the subsystems.\n\nReturns\n\nThe partial trace of the input state.\n\nExamples\n\njulia> v = [1, 0]\n2-element Vector{Int64}:\n 1\n 0\n\njulia> w = [1, 1]/sqrt(2)\n2-element Vector{Float64}:\n 0.7071067811865475\n 0.7071067811865475\n\njulia> vw = tensor(v,w)\n4-element Vector{Float64}:\n 0.7071067811865475\n 0.7071067811865475\n 0.0\n 0.0\n\njulia> partial_trace(vw, [2], [2, 2])\n2×2 Matrix{Float64}:\n 0.5  0.5\n 0.5  0.5\n\n\n\n\n\n","category":"method"},{"location":"#QuantumUtilities.tensor","page":"Home","title":"QuantumUtilities.tensor","text":"tensor(A, B...)\n\nComputes the tensor product of matrices or array-like objects A and B.\n\nArguments\n\nA: The first matrix or array-like object.\nB...: Additional matrices or array-like objects to compute their tensor product with A.\n\nReturns\n\nThe tensor product of the input matrices or array-like objects.\n\nExamples\n\njulia> A = [1 2; 3 4]\n2×2 Matrix{Int64}:\n 1  2\n 3  4\n\njulia> B = [5 6; 7 8]\n2×2 Matrix{Int64}:\n 5  6\n 7  8\n\njulia> C = [9 10; 11 12]\n2×2 Matrix{Int64}:\n 9   10\n 11  12\n\njulia> tensor(A, B)\n4×4 Matrix{Int64}:\n  5   6  10  12\n  7   8  14  16\n 15  18  20  24\n 21  24  28  32\n\njulia> tensor(A, B, C)\n8×8 Matrix{Int64}:\n  45   50   54   60   90  100  108  120\n  55   60   66   72  110  120  132  144\n  63   70   72   80  126  140  144  160\n  77   84   88   96  154  168  176  192\n 135  150  162  180  180  200  216  240\n 165  180  198  216  220  240  264  288\n 189  210  216  240  252  280  288  320\n 231  252  264  288  308  336  352  384\n\n\n\n\n\n","category":"function"}]
}
